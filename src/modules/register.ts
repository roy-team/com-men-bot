/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ –≥—Ä—É–ø–ø—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
import { createHash } from 'node:crypto'
import { Context, Markup } from 'telegraf'
import { escapers } from '@telegraf/entity'
import Module, { CommandContext, isGroupMember } from '@src/module.js'
import { ChatFromGetChat } from 'telegraf/types'
import { getSetting, setSetting, setSettings } from '@src/telegram.js'

const invites: string[] = []

// noinspection JSUnusedGlobalSymbols
export default class extends Module {
  setup() {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã
    this.commands.registerGroup = {
      title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã',
      description: '–†–∞–∑–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
      access: ['privateAll'],
      func: (ctx: CommandContext) => {
        getRegisterOptions()
          .then((data) => {
            if (data.groupId === undefined) {
              ctx.telegram.getChatMember(ctx.payload, ctx.from.id)
                .then((member) => {
                  if (['creator', 'administrator'].includes(member.status)) {
                    void setSettings({
                      registerGroup: ctx.payload,
                      registerSuperAdmin: ctx.from.id.toString(),
                    })

                    ctx.telegram.getChat(ctx.payload)
                      .then((chat) => {
                        const chatTitle = escapers.MarkdownV2((chat as ChatFromGetChat & { title: string }).title)
                        void ctx.reply(
                          `–ì—Ä—É–ø–ø–∞ *${chatTitle}* —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞\\. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`,
                          {
                            parse_mode: 'MarkdownV2',
                          }
                        )
                      })
                  } else {
                    void ctx.reply('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã')
                  }
                })
                .catch((e) => {
                  console.error(e)
                  void ctx.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —á–∞—Ç–∞')
                })
            } else {
              ctx.telegram.getChat(data.groupId)
                .then((chat) => {
                  const chatTitle = escapers.MarkdownV2((chat as ChatFromGetChat & { title: string }).title)
                  void ctx.reply(
                    `–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ *${chatTitle}*`,
                    {
                      parse_mode: 'MarkdownV2',
                    }
                  )
                })
            }
          })
      }
    }

    this.commands.inviteAdmin = {
      title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      access: ['privateAll'],
      func: (ctx: CommandContext) => {
        if (ctx.payload) {
          getRegisterOptions()
            .then((data) => {
              if (data.adminIds.includes(ctx.from.id.toString())) {
                void ctx.reply('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±—É–¥—É—â–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
              } else {
                if (invites.includes(ctx.payload)) {
                  void setSetting('registerAdmins', JSON.stringify([...data.onlyAdminIds, ctx.from.id.toString()]))
                  delete invites[invites.indexOf(ctx.payload)]
                  void ctx.reply('–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
                } else {
                  void ctx.reply('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ')
                }
              }
            })
        } else {
          const inviteCode = Array.from({ length: 8 }, () => Math.random().toString(36).substring(2, 3)).join('')
          invites.push(inviteCode)
          void ctx.reply(
            `–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥—É \`/invite_admin ${inviteCode}\``,
            {
              parse_mode: 'MarkdownV2',
            }
          )
        }
      }
    }

    this.bot.action(/register_task_.*/, (ctx) => {
      void ctx.answerCbQuery()
        .then(async () => {
          void ctx.deleteMessage(ctx.callbackQuery.message?.message_id)
          const query = (ctx.callbackQuery as unknown as { data?: string }).data?.split('_') ?? []

          if (query.length === 4 && query[2] === getTaskHash(query[3])) {
            const welcomeText = [
              `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}! üéâ`,
              '–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –¥—Ä—É–∂–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! –≠—Ç–æ—Ç —á–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –≤—ã, —á—Ç–æ–±—ã –æ–±—Å—É–∂–¥–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ —Ç–µ–º—É, –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∏—Ç—å—Å—è, –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∫–∞–∫ –æ–Ω–ª–∞–π–Ω, —Ç–∞–∫ –∏ –æ—Ñ–ª–∞–π–Ω.',
              '',
              'üìö –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏:',
              '–ü—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞: https://example.com',
              `–ë–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π: https://www.google.com`,
              '',
              '–ú—ã —Ü–µ–Ω–∏–º –∏ –æ—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤, –∫–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è:',
              '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞: –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ç–µ—Ö, –∫—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –Ω–∞—à–∏—Ö —Ç–µ–º–∞—Ö.',
              '–ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º: –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏.',
              '–û—Ç–≤–µ—á–∞—Ç—å: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏.',
              '–ó–Ω–∞–∫–æ–º–∏—Ç—å—Å—è: –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –∑–∞–≤–æ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã.',
              '–î–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: –í–Ω–æ—Å–∏—Ç–µ —Ü–µ–Ω–Ω—ã–µ –∏–¥–µ–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
              '',
              'üåü –ó–∞ –∫–∞–∂–¥–æ–µ –≤–∞—à–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º—ã –∑–∞–º–µ—á–∞–µ–º –∏ —Ü–µ–Ω–∏–º —ç—Ç–æ - –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è!',
              '',
              '–ï—â–µ —Ä–∞–∑ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç! –ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º –º–µ—Å—Ç–æ–º!',
            ]

            const rulesMessage = await ctx.reply(welcomeText.join('\n'), {
              ...Markup.inlineKeyboard([
                [
                  Markup.button.callback('–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞', 'register_rules_accept'),
                ],
              ]),
            })
            await ctx.pinChatMessage(rulesMessage.message_id)
          } else {
            verifyStep1(ctx, false)
          }
        })
    })

    this.bot.action('register_rules_accept', (ctx) => {
      void ctx.answerCbQuery()
        .then(() => {
          if (ctx.update.callback_query.message) {
            void ctx.editMessageReplyMarkup({
              inline_keyboard: []
            })

            getRegisterOptions()
              .then((data) => {
                if (data.groupId) {
                  ctx.telegram.createChatInviteLink(data.groupId, {
                    expire_date: Math.ceil(Date.now() / 1000) + 60 * 60,
                    member_limit: 1,
                  }).then((link) => {
                    void ctx.reply(link.invite_link)
                  })
                }
              })
          }
        })
    })
  }

  startCommand(ctx: CommandContext) {
    getRegisterOptions()
      .then((data) => {
        if (data.superAdminId === undefined) {
          void ctx.reply([
            '–î–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
            '1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã /register_group <ID_–≥—Ä—É–ø–ø—ã>',
          ].join('\n'))
        } else if (data.superAdminId === ctx.chat.id.toString()) {
          void ctx.reply('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        } else if (data.adminIds.includes(ctx.chat.id.toString())) {
          void ctx.reply('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        } else {
          isGroupMember(this.bot, data.groupId!, ctx.from.id)
            .then((result) => {
              if (result) {
                void ctx.reply('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ')
              } else {
                ctx.telegram.getChat(data.groupId!)
                  .then((chat) => {
                    const chatTitle = escapers.MarkdownV2((chat as ChatFromGetChat & { title: string }).title)
                    ctx.reply(`–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç\\-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã *${chatTitle}*`, {
                      parse_mode: 'MarkdownV2',
                    }).then(() => {
                      verifyStep1(ctx)
                    })
                  })
              }
            })
        }
      })
  }
}

export async function getRegisterOptions() {
  const superAdminId = await getSetting('registerSuperAdmin')
  let adminIds: string[]

  try {
    adminIds = JSON.parse(await getSetting('registerAdmins') ?? '[]') ?? []
  } catch (e) {
    adminIds = []
  }

  const onlyAdminIds = adminIds.map((item) => item)

  if (superAdminId) {
    adminIds.unshift(superAdminId)
  }

  return {
    groupId: await getSetting('registerGroup'),
    superAdminId,
    adminIds,
    onlyAdminIds,
  }
}

const getTaskHash = (n: number | string): string =>
  createHash('sha256').update(n.toString()).digest('hex').substring(0, 8)

const verifyStep1 = (ctx: Context, first: boolean = true) => {
  const op = Math.random() >= 0.5 ? '+' : '-'
  let firstNumber = Math.floor(Math.random() * 100)
  let secondNumber = Math.floor(Math.random() * 100)

  if (op === '-' && firstNumber < secondNumber) {
    firstNumber += secondNumber
    secondNumber = firstNumber - secondNumber
    firstNumber -= secondNumber
  }

  const prompt = first ? '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:' : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑:'
  const result = op === '+' ? firstNumber + secondNumber : firstNumber - secondNumber
  const hash = getTaskHash(result)
  const variants = new Array(5).fill(0).map(() => Math.floor(Math.random() * 100))
  variants.push(result)
  variants.sort()

  void ctx.reply(`${prompt} ${firstNumber} ${op} ${secondNumber} = ?`, {
    ...Markup.inlineKeyboard([
      variants.slice(0, 3).map((item) =>
        Markup.button.callback(item.toString(), `register_task_${hash}_${item}`)),
      variants.slice(3, 6).map((item) =>
        Markup.button.callback(item.toString(), `register_task_${hash}_${item}`)),
    ]),
  })
}